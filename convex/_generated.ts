/* eslint-disable */
// Generated by @convex-dev/cli@0.0.67
// based on the contents of this directory.
// To regenerate, run `convex codegen`.
import type createGame from './createGame';
import type createOrJoinRandom from './createOrJoinRandom';
import type createRound from './createRound';
import type guessWord from './guessWord';
import type joinGame from './joinGame';
import type queryGame from './queryGame';
import type queryRound from './queryRound';
import type steal from './steal';
import type storeUser from './storeUser';
import type validateGame from './validateGame';

import type { MutationCtx, QueryCtx } from '@convex-dev/server';
type DropFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never;
type ClientMutation<F extends (first: MutationCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;
type ClientQuery<F extends (first: QueryCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;

type ConvexAPI = {
  queries: {
    queryGame: ClientQuery<typeof queryGame>;
    queryRound: ClientQuery<typeof queryRound>;
    validateGame: ClientQuery<typeof validateGame>;
  };
  mutations: {
    createGame: ClientMutation<typeof createGame>;
    createOrJoinRandom: ClientMutation<typeof createOrJoinRandom>;
    createRound: ClientMutation<typeof createRound>;
    guessWord: ClientMutation<typeof guessWord>;
    joinGame: ClientMutation<typeof joinGame>;
    steal: ClientMutation<typeof steal>;
    storeUser: ClientMutation<typeof storeUser>;
  };
};

import {
  makeUseQuery,
  makeUseMutation,
  makeUseConvex,
} from '@convex-dev/react';

export const useQuery = makeUseQuery<ConvexAPI>();
export const useMutation = makeUseMutation<ConvexAPI>();
export const useConvex = makeUseConvex<ConvexAPI>();
